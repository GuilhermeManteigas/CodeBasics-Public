
documentation = [
    {
        id: 1,
        section: "control_flows",
        name: "if",
        description: "The <b>if</b> statement is a fundamental control flow statement in programming that allows a program to execute a block of code only if a certain condition is true. The <b>if</b> statement begins with the keyword <b>if</b>, followed by a condition that is enclosed in parentheses. If the condition is true, the code inside the curly braces will be executed, otherwise it will be skipped.",
        example: "if(x > 5){\n &nbsp print('x is bigger than 5');\n}",
    },{
        id: 2,
        section: "control_flows",
        name: "else",
        description: "The <b>if</b> statement can also be followed by an optional <b>else</b> statement that executes a different block of code if the condition is false. The <b>else</b> statement is executed only if the <b>if</b> statement's condition is false. This allows the program to perform different actions based on whether the condition is true or false.",
        example: "if(x > 5){\n &nbsp print('x is bigger than 5');\n}else{\n &nbsp print('x is smaller or equal to 5');\n}",
    },{
        id: 3,
        section: "control_flows",
        name: "while",
        description: "The <b>while</b> statement is a control flow statement in programming that allows a program to repeatedly execute a block of code while a certain condition is true. The <b>while</b> loop begins with the keyword <b>while</b>, followed by a condition that is enclosed in parentheses. If the condition is true, the code inside the curly braces will be executed repeatedly until the condition becomes false.",
        example: "while(x < 5){\n &nbsp print(x);\n &nbsp x++;\n}",
    },{
        id: 4,
        section: "control_flows",
        name: "for",
        description: "The <b>for</b> loop is a control flow statement in programming that allows a program to repeatedly execute a block of code a certain number of times. The <b>for</b> loop begins with the keyword <b>for</b>, followed by a variable declaration, a condition and an incrementor inside of parentheses. The code inside the loop will be executed once for each value of the variable.",
        example: "for(i = 0; i < 5; i++){\n &nbsp print(i);\n}",
    },{
        id: 5,
        section: "control_flows",
        name: "foreach",
        description: "The <b>foreach</b> loop is a specialized form of the <b>for</b> loop that is used to iterate over elements in a collection, such as an arrays or lists. The <b>foreach</b> loop is designed to simplify the process of iterating over a collection by abstracting away the details of accessing and incrementing the loop variable.\nThe <b>foreach</b> loop begins with the keyword <b>foreach</b>, followed by a variable that will be assigned each element in the collection, the keyword in, and the collection itself. The code inside the loop will be executed once for each element in the collection.",
        example: "foreach(element in array){\n &nbsp print(element); \n}",
    },
    
    {
        id: 6,
        section: "keywords",
        name: "in",
        description: "The <b>in</b> keyword is used to iterate through a sequence in a foreach loop.",
        example: "foreach(element in array){\n &nbsp print(element); \n}",
    },{
        id: 7,
        section: "keywords",
        name: "return",
        description: "The <b>return</b> statement ends function execution and specifies a value to be returned to the function caller.",
        example: "function(a, b){\n &nbsp return a + b;\n}",
    },{
        id: 8,
        section: "keywords",
        name: "break",
        description: "The <b>break</b> statement terminates the current loop and transfers program control to the statement following the terminated statement.",
        example: "while(x < 5){\n &nbsp break;\n}",
    },{
        id: 9,
        section: "keywords",
        name: "continue",
        description: "The <b>continue</b> statement terminates execution of the statements in the current iteration of the current loop, and continues execution of the loop with the next iteration.",
        example: "for(i = 0; i < 5; i++){\n &nbsp continue;\n}",
    },{
        id: 10,
        section: "keywords",
        name: "true",
        description: "The <b>true</b> keyword can be used to represent the boolean value true.",
        example: "if(true){\n &nbsp print('Its true!');\n}",
    },{
        id: 11,
        section: "keywords",
        name: "false",
        description: "The <b>false</b> keyword can be used to represent the boolean value false.",
        example: "if(false){\n &nbsp print('Its false!');\n}",
    },

    {
        id: 12,
        section: "logic_operators",
        name: "and &&",
        description: "The <b>and</b> or <b>&&</b> operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.",
        example: "if(10 > 5 && 1 < 2 and 3 == 3){\n &nbsp print('Its true!');\n}",
    },{
        id: 13,
        section: "logic_operators",
        name: "or ||",
        description: "The <b>or</b> or <b>||</b> operator for a set of operands is true if and only if one or more of its operands is true. It is typically used with boolean values. When it is, it returns a Boolean value.",
        example: "if(10 > 5 || 10 < 2 or 3 == 5){\n &nbsp print('Its true!');\n}",
    },{
        id: 14,
        section: "logic_operators",
        name: "not !",
        description: "The <b>!</b> operator takes truth to falsity and vice versa. It is typically used with boolean values.",
        example: "if(!false){\n &nbsp print('Its true!');\n}",
    },

    {
        id: 15,
        section: "comparison_operators",
        name: "Equality (==)",
        description: "The <b>equality (==)</b> operator checks whether its two operands are equal, returning a Boolean result.",
        example: "if(1 == 1){\n &nbsp print('Its true!');\n}",
    },{
        id: 16,
        section: "comparison_operators",
        name: "Inequality (!=)",
        description: "The <b>inequality (!=)</b> operator checks whether its two operands are not equal, returning a Boolean result.",
        example: "if(1 != 1){\n &nbsp print('Its false!');\n}",
    },{
        id: 17,
        section: "comparison_operators",
        name: "Less than or equal (<=)",
        description: "The <b>less than or equal (<=)</b> operator returns true if the left operand is less than or equal to the right operand, and false otherwise.",
        example: "if(1 <= 5){\n &nbsp print('Its true!');\n}",
    },{
        id: 18,
        section: "comparison_operators",
        name: "Greater than or equal (>=)",
        description: "The <b>greater than or equal (>=)</b> operator returns true if the left operand is greater than or equal to the right operand, and false otherwise.",
        example: "if(10 >= 5){\n &nbsp print('Its true!');\n}",
    },{
        id: 19,
        section: "comparison_operators",
        name: "Less than (<)",
        description: "The <b>less than (<)</b> operator returns true if the left operand is less than the right operand, and false otherwise.",
        example: "if(5 < 10){\n &nbsp print('Its true!');\n}",
    },{
        id: 20,
        section: "comparison_operators",
        name: "Greater than (>)",
        description: "The <b>greater than (>)</b> operator returns true if the left operand is greater than the right operand, and false otherwise. ",
        example: "if(!false){\n &nbsp print('Its true!');\n}",
    },

    {
        id: 21,
        section: "operators",
        name: "Addition (+)",
        description: "The <b>addition (+)</b> operator produces the sum of numeric operands or string concatenation.",
        example: "x = 5 + 5;\nprint('Hello ' + 'World!');",
    },{
        id: 22,
        section: "operators",
        name: "Subtraction (-)",
        description: "The <b>subtraction (-)</b> operator subtracts the two operands, producing their difference.",
        example: "x = 5 - 2;",
    },{
        id: 23,
        section: "operators",
        name: "Multiplication (*)",
        description: "The <b>multiplication (*)</b> operator produces the product of the operands.",
        example: "x = 2 * 5;",
    },{
        id: 24,
        section: "operators",
        name: "Division (/)",
        description: "The <b>division (/)</b> operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.",
        example: "x = 10 / 2;",
    },{
        id: 25,
        section: "operators",
        name: "Assignment (=)",
        description: "The <b>assignment (=)</b> operator is used to assign a value to a variable. The assignment operation evaluates to the assigned value.",
        example: "x = 5;",
    },

    {
        id: 26,
        section: "concepts_objects_functions",
        name: "Numbers",
        description: "Numbers can be positive negative and have floating points.",
        example: "5\n-5\n5.5",
    },{
        id: 27,
        section: "concepts_objects_functions",
        name: "Strings",
        description: "A string is any text or numbers that inside of 2 single quotation marks.",
        example: "\'This is a string!\'",
    },{
        id: 28,
        section: "concepts_objects_functions",
        name: "Variables",
        description: "A variable is declared by choosing a name and making it equal to something.",
        example: "x = 5;\ny = 'word';\narray = [1,2,3];",
    },{
        id: 29,
        section: "concepts_objects_functions",
        name: "Arrays",
        description: "The Arrays enable storing a collection of multiple items under a single variable name.",
        example: "array = [1,2,3,4,5,6,7,8,9,10];\n",
    },{
        id: 30,
        section: "concepts_objects_functions",
        name: "Functions",
        description: "Functions are one of the fundamental building blocks of programming. A function is a set of statements that performs a task or calculates a value, they can take parameters as input and return an output. To use a function, you must define it somewhere in the scope from which you wish to call it.",
        example: "fun(n1, n2){\nreturn n1 + n2;\n}\n\nfun(1,2);",
    },

    {
        id: 31,
        section: "functions",
        name: "print()",
        description: "Use the print function to print anything to the console.",
        example: "print('Hello World');",
    },{
        id: 32,
        section: "functions",
        name: "printmem()",
        description: "Prints all the variables in the current scope.",
        example: "printmem();",
    },{
        id: 33,
        section: "functions",
        name: "int(string)",
        description: "Converts a string to a number and returns it.",
        example: "int('123');",
    },{
        id: 34,
        section: "functions",
        name: "string(number)",
        description: "Converts a number to a string and returns it.",
        example: "string(55);",
    },{
        id: 35,
        section: "functions",
        name: "sort(array)",
        description: "Sorts the elements of an array in numeric or alphabetical order.",
        example: "sort([5, 3, 9]);",
    },{
        id: 36,
        section: "functions",
        name: "reverse(array)",
        description: "Reverses the order of the elements in an array.",
        example: "reverse([1, 2, 3]);",
    },{
        id: 37,
        section: "functions",
        name: "shuffle(array)",
        description: "Shuffles the elements of an array into a random order.",
        example: "shuffle([1, 2, 3]);",
    },{
        id: 38,
        section: "functions",
        name: "max(array)",
        description: "Returns the maximum value in an array.",
        example: "max([1, 2, 3]);",
    },{
        id: 39,
        section: "functions",
        name: "min(array)",
        description: "Returns the minimum value in an array.",
        example: "min([1, 2, 3]);",
    },{
        id: 40,
        section: "functions",
        name: "slice(array, start, end)",
        description: "Returns a new array with the elements from the start index up to, but not including, the end index.",
        example: "slice([1, 2, 3, 4, 5], 1, 3);",
    },{
        id: 41,
        section: "functions",
        name: "clear(array)",
        description: "Removes all elements from an array.",
        example: "clear(array);",
    },{
        id: 42,
        section: "functions",
        name: "append(array, item)",
        description: "Adds a new element to the end of an array.",
        example: "append(array, 4);",
    },{
        id: 43,
        section: "functions",
        name: "pop(array)",
        description: "Removes and returns the last element of an array.",
        example: "pop(array);",
    },{
        id: 44,
        section: "functions",
        name: "remove(array, item)",
        description: "Removes the first intance of item found in the array.",
        example: "remove(array, 5);",
    },{
        id: 45,
        section: "functions",
        name: "removeAll(array, item)",
        description: "Removes every intance of item found in the array.",
        example: "removeAll(array, 5);",
    },{
        id: 46,
        section: "functions",
        name: "index(array, item)",
        description: "Returns the index value of the first intance of item found in the array.",
        example: "index(array, 55);",
    },{
        id: 47,
        section: "functions",
        name: "size(array)",
        description: "Returns the size of the array.",
        example: "size(array);",
    },{
        id: 48,
        section: "functions",
        name: "count(array, item)",
        description: "Returns the numbr of ocurrences of item in the array.",
        example: "count(array, 5);",
    },{
        id: 49,
        section: "functions",
        name: "average(array)",
        description: "Returns the average of the sum of all the numbers in the array.",
        example: "average(array);",
    },{
        id: 50,
        section: "functions",
        name: "sum(array)",
        description: "Returns the sum of all the numbr in the array.",
        example: "sum(array);",
    },{
        id: 51,
        section: "functions",
        name: "date()",
        description: "Returns the current date in the format of [Day of the week] [Month] [Day] [Year] [Hours]:[Minutes]:[Seconds] [Timezone]",
        example: "print(date());",
    },{
        id: 52,
        section: "functions",
        name: "time()",
        description: "Returns the number of milliseconds since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
        example: "print(time);",
    },{
        id: 53,
        section: "functions",
        name: "wait(time)",
        description: "Stops the code for a certain amount of time in seconds.",
        example: "wait(5);",
    },{
        id: 54,
        section: "functions",
        name: "random(max)",
        description: "Returns a random number between 0 and max.",
        example: "random(5);",
    },{
        id: 55,
        section: "functions",
        name: "pow(x, y)",
        description: "Returns the value of a base raised to a power.",
        example: "pow(2, 5);",
    },{
        id: 56,
        section: "functions",
        name: "sqrt(x)",
        description: "Returns the square root of a number.",
        example: "sqrt(4);",
    },{
        id: 57,
        section: "functions",
        name: "round(x)",
        description: "Returns the value of a number rounded to the nearest integer.",
        example: "round(5.4);",
    },{
        id: 58,
        section: "functions",
        name: "abs(x)",
        description: "Returns the absolute value of a number x.",
        example: "abs(-5);",
    },{
        id: 59,
        section: "functions",
        name: "sin(x)",
        description: "Returns the sine of a number in radians.",
        example: "sin(2);",
    },{
        id: 60,
        section: "functions",
        name: "cos(x)",
        description: "Returns the cosine of a number in radians.",
        example: "cos(2);",
    },{
        id: 61,
        section: "functions",
        name: "tan(x)",
        description: "Returns the tangent of a number in radians.",
        example: "tan(2);",
    },{
        id: 62,
        section: "functions",
        name: "log(x)",
        description: "Returns the natural logarithm of a number.",
        example: "log(2);",
    },{
        id: 63,
        section: "functions",
        name: "log2(x)",
        description: "Returns the base 2 logarithm of a number.",
        example: "log2(2);",
    },{
        id: 64,
        section: "functions",
        name: "log10(x)",
        description: "Returns the base 10 logarithm of a number.",
        example: "log10(2);",
    },{
        id: 65,
        section: "functions",
        name: "floor(x)",
        description: "Returns the round down largest integer less than or equal to a given number.",
        example: "floor(5.8);",
    },{
        id: 66,
        section: "functions",
        name: "ceil(x)",
        description: "Returns the round up largest integer more than or equal to a given number.",
        example: "ceil(5.8);",
    },{
        id: 67,
        section: "functions",
        name: "run_js(code)",
        description: "This function recieves a string of JavaScript code, executes it and returns the results.",
        example: "run_js('Math.trunc(5.55)');",
    }
  ];
  

module.exports = documentation;